{"version":3,"sources":["assets/images/clear.svg","assets/images/right-arrow.svg","assets/images/Picture free icon.svg","assets/images/Paper clip outline free icon.svg","assets/images/Cog wheel silhouette free icon.svg","assets/images/User shape free icon.svg","assets/images/Padlock free icon.svg","components/ChatModal/ChatModal.js","components/ChatSelectButton/ChatSelectButton.js","pages/SettingUp/SettingUp.js","components/ChatInput/ChatInput.js","containers/NickNameContainer/NickNameContainer.js","pages/NickNameSetting/NickNameSetting.js","pages/ChatType/ChatType.js","components/ChatroomTab/ChatroomTab.js","containers/CancelChatroom/CancelChatroom.js","components/MessagesTextarea/MessagesTextarea.js","components/MessagesBoard/MessagesBoard.js","constance/RandomConmunication.js","containers/SentMessages/SentMessages.js","components/ChatroomInfoBar/ChatroomInfoBar.js","containers/CreateChatroom/CreateChatroom.js","components/ChatMessages/ChatMessages.js","pages/ChatroomInterface/ChatroomInterface.js","router/index.js","serviceWorker.js","index.js"],"names":["module","exports","ChatModal","className","height","children","modalRef","ref","style","ChatSelectButton","fontSize","color","displayName","backgroundColor","handleClick","onClick","SettingUp","to","ChatInput","value","handleChange","name","placeholder","width","type","onChange","NickNameContainer","useState","setValue","e","target","NickNameSetting","letterSpacing","ChatType","ChatroomTab","src","clearSvg","alt","CancelChatroom","close","handleClose","MessagesTextarea","textAreaRef","autoFocus","MessagesBoard","messagesRef","SENTENCE","SentMessages","useRef","useEffect","current","selectionStart","randomSentence","setTimeout","p","document","createElement","randonIndex","Math","floor","random","length","innerHTML","appendChild","split","focus","replace","RightArrow","id","file","files","a","href","window","URL","createObjectURL","htmlFor","Paper","Picture","ChatroomInfoBar","User","Padlock","Wheel","CreateChatroom","chatroomName","setChatroomName","chatroomPw","setChatroomPw","display","ChatMessages","ChatroomInterface","setClose","Router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.124c65b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear.bebd4b5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/right-arrow.b1a79cf6.svg\";","module.exports = __webpack_public_path__ + \"static/media/Picture free icon.1fcbe430.svg\";","module.exports = __webpack_public_path__ + \"static/media/Paper clip outline free icon.f882b8d6.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cog wheel silhouette free icon.dcac8abd.svg\";","module.exports = __webpack_public_path__ + \"static/media/User shape free icon.b96c4c15.svg\";","module.exports = __webpack_public_path__ + \"static/media/Padlock free icon.8ce327cb.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ChatModal.scss';\n\nconst ChatModal = ({ className = '', height = '250px', children, modalRef }) => (\n  <div\n    className={`${className} modal`}\n    ref={modalRef}\n    style={{\n      height: height\n    }}\n  >\n    {children}\n  </div>\n);\n\nChatModal.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.element\n};\n\nexport default ChatModal;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ChatSelectButton.scss';\n\nconst ChatSelectButton = ({\n  className,\n  fontSize = '18px',\n  color = '#D4D4D4',\n  displayName,\n  backgroundColor = 'transparent',\n  handleClick,\n  children }) => (\n    <button\n      className={`${className} button`}\n      style={{\n        fontSize: fontSize,\n        color: color,\n        backgroundColor: backgroundColor\n      }}\n      onClick={handleClick}\n    >\n      {displayName}\n      {children}\n    </button>\n  );\n\nChatSelectButton.propTypes = {\n  className: PropTypes.string,\n  fontSize: PropTypes.string,\n  handleClick: PropTypes.func,\n  color: PropTypes.string,\n  children: PropTypes.element,\n  backgroundColor: PropTypes.string,\n  displayName: PropTypes.string.isRequired\n};\n\nexport default ChatSelectButton;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ChatModal from '../../components/ChatModal';\nimport ChatSelectButton from '../../components/ChatSelectButton';\n\nconst SettingUp = () => {\n  return (\n    <ChatModal\n      children={\n        <>\n          <Link to='/chooseChatType'>\n            <ChatSelectButton\n              color='#D7BA7D'\n              displayName='[匿名聊天]'\n            />\n          </Link>\n          <Link to='/nickNameSettings'>\n            <ChatSelectButton\n              displayName='[暱稱聊天]'\n            />\n          </Link>\n        </>\n      }\n    />\n  );\n};\n\nexport default SettingUp;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ChatInput.scss';\n\nconst ChatInput = ({ value, handleChange, name, placeholder, width = '' }) => (\n  <label className='chatInput'>\n    {\n      name && <span>{name}</span>\n    }\n    <input\n      type=\"text\"\n      style={{\n        width: width\n      }}\n      value={value}\n      onChange={handleChange}\n      placeholder={placeholder}\n    />\n  </label>\n);\n\nChatInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  width: PropTypes.string\n};\n\nexport default ChatInput;","import React, { useState } from 'react';\n\nimport ChatInput from '../../components/ChatInput';\n\nconst NickNameContainer = () => {\n  const [value, setValue] = useState('');\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  }\n\n  return (\n    <ChatInput\n      value={value}\n      handleChange={handleChange}\n      placeholder='輸入暱稱'\n    />\n  );\n};\n\nexport default NickNameContainer;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ChatModal from '../../components/ChatModal';\nimport ChatSelectButton from '../../components/ChatSelectButton';\nimport NickNameContainer from '../../containers/NickNameContainer';\n\nconst NickNameSetting = () => (\n  <ChatModal\n    children={\n      <>\n        <h3 style={{\n          letterSpacing: '0',\n          color: '#9CDCFE'\n        }}>暱稱聊天</h3>\n        <NickNameContainer />\n        <Link to='/chooseChatType'>\n          <ChatSelectButton\n            displayName='[確定]'\n          />\n        </Link>\n      </>\n    }\n  />\n);\n\nexport default NickNameSetting;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ChatModal from '../../components/ChatModal';\nimport ChatSelectButton from '../../components/ChatSelectButton';\n\nconst ChatType = () => (\n  <ChatModal\n    children={\n      <>\n        <Link to='/chatroomInterface'>\n          <ChatSelectButton\n            displayName='[隨機配對1對1聊天]'\n          />\n        </Link>\n        <Link to='/chatroomInterface'>\n          <ChatSelectButton\n            displayName='[進入聊天大廳]'\n          />\n        </Link>\n      </>\n    }\n  />\n);\n\nexport default ChatType;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clearSvg from '../../assets/images/clear.svg';\n\nimport './ChatroomTab.scss';\n\nconst ChatroomTab = ({ name, handleClick }) => (\n  <div className='chatroomTab'>\n    <span>{name}</span>\n    <img\n      src={clearSvg}\n      alt=\"clear\"\n      onClick={handleClick}\n    />\n  </div>\n);\n\nChatroomTab.propTypes = {\n  name: PropTypes.string,\n  handleClick: PropTypes.func\n};\n\nexport default ChatroomTab;\n","import React from 'react';\n\nimport ChatroomTab from '../../components/ChatroomTab';\n\nconst CancelChatroom = ({ close, handleClose }) => {\n  return (\n    (!close) ?\n      <ChatroomTab\n        name='testtest'\n        handleClick={handleClose}\n      /> : ''\n  );\n};\n\nexport default CancelChatroom;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MessagesTextarea.scss';\n\nconst MessagesTextarea = ({ value, handleChange, textAreaRef }) => (\n  <textarea\n    ref={textAreaRef}\n    className=\"messagesTextarea\"\n    value={value}\n    onChange={handleChange}\n    autoFocus={true}\n  />\n\n);\n\nMessagesTextarea.propTypes = {\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired\n};\n\nexport default MessagesTextarea;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MessagesBoard.scss';\n\nconst MessagesBoard = ({ messagesRef }) => (\n  <div\n    className=\"messagesBoard\"\n    ref={messagesRef}\n  >\n  </div>\n);\n\nMessagesBoard.propTypes = {\n  message: PropTypes.string\n};\n\nexport default MessagesBoard;","const SENTENCE = [\n  '人遠比自己想象的要堅強，特別是當你回頭看看的時候，你會發現自己走了一段自己都沒想到的路。',\n  '不要杞人憂天。煩惱並不會減少明天的負擔，卻會失去今天的快樂。',\n  '一道幸福之門關閉時，另一道就會打開。我們經常盯著關閉的門，對開啟的門卻視若無睹。',\n  '每個女人都希望男人把她當做唯一，而不是二選一。',\n  '人跟人之間的感情就像織毛衣，建立的時候一針一線，小心而漫長，拆除的時候只要輕輕一拉。',\n  '其實全世界最幸福的童話，不過是，與你一起度過柴米油鹽歲月的他。',\n  '不管你經歷多痛的事情，到最後都會漸漸遺忘。因為，沒有什麼能敵得過時光。',\n  '總有那麼一個人，不管他以前如何對你，你總會找到原諒他的理由。',\n  '一切都會好起來的，即使不會是在今天，但總有一天會的。',\n  '有時候，上天沒有給你想要的，不是因為你不配，而是你值得擁有更好的。',\n  '青春就像是切洋蔥，我們都淚流滿面，卻還樂此不疲。',\n  '每當我們覺得不幸福的時候，總會為曾經錯過了的感情和那個錯過了的人加入許多幻想和詩意。',\n  '沒有不會淡的疤,沒有不會好的傷，沒有不會停下來的絕望。'\n];\n\nexport default SENTENCE;","import React, { useState, useRef, useEffect } from 'react';\n\nimport MessagesTextarea from '../../components/MessagesTextarea';\nimport ChatSelectButton from '../../components/ChatSelectButton';\nimport MessagesBoard from '../../components/MessagesBoard';\n\nimport SENTENCE from '../../constance/RandomConmunication';\n\nimport RightArrow from '../../assets/images/right-arrow.svg';\nimport Picture from '../../assets/images/Picture free icon.svg';\nimport Paper from '../../assets/images/Paper clip outline free icon.svg';\n\nconst SentMessages = () => {\n  const [value, setValue] = useState('  Dean >  ');\n  const textAreaRef = useRef();\n  const messagesRef = useRef();\n  useEffect(() => {\n    textAreaRef.current.selectionStart = 10;\n  }, [textAreaRef]);\n\n  const randomSentence = () => {\n    setTimeout(() => {\n      const p = document.createElement('p');\n      const randonIndex = Math.floor(Math.random() * SENTENCE.length);\n      p.innerHTML = `Test : ${SENTENCE[randonIndex]}`;\n      p.style.color = 'blue';\n      messagesRef.current.appendChild(p);\n    }, 500);\n  }\n\n  const handleUpload = e => {\n    const file = e.target.files[0];\n    const p = document.createElement(\"p\");\n    const a = document.createElement(\"a\");\n    a.href = window.URL.createObjectURL(file);\n    a.target = '_blank';\n    a.style.color = 'green';\n    a.innerHTML = file.name;\n    p.innerHTML = '  Dean >  ';\n    p.style.color = 'green';\n    p.appendChild(a);\n    messagesRef.current.appendChild(p);\n    randomSentence();\n  }\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  }\n\n  const handleClick = e => {\n    if (value.split('>')[1] !== '  ') {\n      const textDOM = textAreaRef.current;\n      textDOM.focus();\n      setValue('  Dean >  ');\n      const p = document.createElement('p');\n      p.innerHTML = value.replace('>', \":\");\n      p.style.color = 'green';\n      messagesRef.current.appendChild(p);\n      randomSentence();\n    }\n  }\n\n  return (\n    <>\n      <MessagesBoard\n        messagesRef={messagesRef}\n      />\n      <MessagesTextarea\n        textAreaRef={textAreaRef}\n        value={value}\n        handleChange={handleChange}\n      />\n      <ChatSelectButton\n        className=\"chatMessages__send\"\n        fontSize='12px'\n        displayName='傳送'\n        handleClick={handleClick}\n        children={<img src={RightArrow} alt='right arrow' />}\n        backgroundColor=\"#2A2A2A\"\n      />\n      <div className=\"chatMessages__icons\">\n        <input\n          id='uploadFile'\n          type='file'\n          onChange={handleUpload}\n        />\n        <label htmlFor=\"uploadFile\">\n          <img src={Paper} alt=\"paper\" />\n        </label>\n        <img src={Picture} alt=\"sticky\" />\n        <ChatSelectButton\n          fontSize='12px'\n          displayName='(ﾟ∀ﾟ)'\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SentMessages;","import React from 'react';\n\nimport Wheel from '../../assets/images/Cog wheel silhouette free icon.svg';\nimport User from '../../assets/images/User shape free icon.svg';\nimport Padlock from '../../assets/images/Padlock free icon.svg';\n\nimport './ChatroomInfoBar.scss';\n\nconst ChatroomInfoBar = () => (\n  <div className=\"chatroomInfoBar\">\n    <div>\n      <span>\n        <img src={User} alt=\"User\" />\n        <h6>2</h6>\n      </span>\n      <span>\n        <img src={Padlock} alt=\"Padlock\" />\n        <h6>保密</h6>\n      </span>\n      <img src={Wheel} alt=\"wheel\" />\n    </div>\n  </div>\n);\n\nexport default ChatroomInfoBar;","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChatModal from '../../components/ChatModal';\nimport ChatSelectButton from '../../components/ChatSelectButton';\nimport ChatInput from '../../components/ChatInput';\n\nconst CreateChatroom = ({ handleClose }) => {\n  const [chatroomName, setChatroomName] = useState('');\n  const [chatroomPw, setChatroomPw] = useState('');\n  const modalRef = useRef();\n  useEffect(() => {\n    modalRef.current.style.display = 'none';\n  }, []);\n\n  const openModal = () => {\n    modalRef.current.style.display = '';\n  };\n\n  const closeModal = () => {\n    modalRef.current.style.display = 'none';\n    handleClose();\n  };\n\n  const handleChatroomName = e => {\n    setChatroomName(e.target.value);\n  };\n\n  const handleChatroomPw = e => {\n    setChatroomPw(e.target.value);\n  };\n\n  return (\n    <>\n      <ChatSelectButton\n        displayName='新增聊天室'\n        fontSize='14px'\n        handleClick={openModal}\n      />\n      <ChatModal\n        modalRef={modalRef}\n        height='360px'\n        children={\n          <>\n            <h2>新增聊天室</h2>\n            <ChatInput\n              value={chatroomName}\n              handleChange={handleChatroomName}\n              placeholder='聊天室名稱'\n            />\n            <h4>限制</h4>\n            <span>\n              設密碼\n              <ChatInput\n                value={chatroomPw}\n                handleChange={handleChatroomPw}\n                placeholder='XXXX'\n                width='100px'\n              />\n            </span>\n            <small>公開: 顯示在聊天大廳任何人都能加入</small>\n            <small>私密: 只能用搜尋聊天室才能找到</small>\n            <ChatSelectButton\n              displayName='[確定]'\n              fontSize='20px'\n              handleClick={closeModal}\n            />\n          </>\n        }\n      />\n    </>\n  )\n};\n\nCreateChatroom.propTypes = {\n  handleClose: PropTypes.func\n};\n\nexport default CreateChatroom;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SentMessages from '../../containers/SentMessages';\nimport CharroomInfoBar from '../ChatroomInfoBar';\nimport CharSelectButton from '../ChatSelectButton';\nimport CreateChatroom from '../../containers/CreateChatroom';\n\nimport './ChatMessages.scss';\n\nconst ChatMessages = ({ close, handleClose }) => (\n  <div className=\"chatMessages\">\n    {\n      !close ?\n        <>\n          <SentMessages />\n          <CharroomInfoBar />\n        </> :\n        <div className=\"chatMessages__createChatroom\">\n          <div>\n            <h3>ヽ(✿ﾟ▽ﾟ)ノ</h3>\n            <h4>馬上開始你的聊天吧~</h4>\n          </div>\n          <CharSelectButton\n            displayName='隨機一對一配對'\n            fontSize='14px'\n          />\n          <CharSelectButton\n            displayName='隨機進入群組'\n            fontSize='14px'\n          />\n          <CreateChatroom\n            handleClose={handleClose}\n          />\n        </div>\n    }\n  </div>\n);\n\nChatMessages.propTypes = {\n  close: PropTypes.bool.isRequired\n}\nexport default ChatMessages;","import React, { useState } from 'react';\n\nimport CancelChatroom from '../../containers/CancelChatroom';\nimport ChatMessages from '../../components/ChatMessages';\n\nimport './ChatroomInterface.scss';\n\nconst ChatroomInterface = () => {\n  const [close, setClose] = useState(true);\n\n  const handleClose = () => {\n    setClose(!close)\n  };\n\n  return (\n    <div className=\"chatroomInterface\">\n      <div className=\"chatroomInterface__sidebar\">\n\n      </div>\n      <div className=\"chatroomInterface__container\">\n        <div className=\"chatroomInterface__container--tabs\">\n          <CancelChatroom\n            close={close}\n            handleClose={handleClose} />\n        </div>\n        <div className=\"chatroomInterface__container--body\">\n          <ChatMessages\n            close={close}\n            handleClose={handleClose}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatroomInterface;","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport SettingUp from '../pages/SettingUp/index';\nimport NickNameSetting from '../pages/NickNameSetting';\nimport ChatType from '../pages/ChatType';\nimport ChatroomInterface from '../pages/ChatroomInterface';\n\nimport './router.scss';\n\nconst Router = () => {\n\n  return (\n    <BrowserRouter>\n      <div className=\"chatroom\">\n        <Route\n          exact\n          path='/'\n          component={SettingUp}\n        />\n        <Route\n          path='/nickNameSettings'\n          component={NickNameSetting}\n        />\n        <Route\n          path='/chooseChatType'\n          component={ChatType}\n        />\n        <Route\n          path='/chatroomInterface'\n          component={ChatroomInterface}\n        />\n      </div>\n    </BrowserRouter>\n  )\n};\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Router from '../src/router/index';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}